

# This file was *autogenerated* from the file sage_test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1000 = Integer(1000); _sage_const_2048 = Integer(2048); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4)#  Linear Complexity Analysis for GrainSoft128AEAD Keystream
from sage.all import *
from sage.crypto.lfsr import lfsr_connection_polynomial

# === CONFIGURATION ===
file_path = "/home/ronit/final_year/keystream_bits.txt"
min_required_bits = _sage_const_1000 
max_bits_to_use = _sage_const_2048 

# === Load Keystream ===
print(" Loading keystream from file...")
try:
    with open(file_path, "r") as f:
        content = f.read().strip()
        if not all(c in '01' for c in content):
            raise ValueError("File contains non-binary characters.")
        bits = [int(c) for c in content][:max_bits_to_use]
except FileNotFoundError:
    print(f" Error: File '{file_path}' not found. Make sure it's generated and located properly.")
    exit()
except ValueError as ve:
    print(f" Error: {ve}")
    exit()

# === Validate bitstream length ===
if len(bits) < min_required_bits:
    print(f"  Not enough keystream bits ({len(bits)} found, {min_required_bits} required).")
    exit()

# === Convert to GF(2) ===
print(" Converting keystream to GF(2)...")
F = GF(_sage_const_2 )
bits_gf2 = [F(b) for b in bits]

# === Compute Linear Complexity ===
print(" Computing linear complexity using Berlekamp-Massey algorithm...")
try:
    conn_poly = lfsr_connection_polynomial(bits_gf2)
    linear_complexity = conn_poly.degree()
except Exception as e:
    print(f" Error during computation: {e}")
    exit()

# === Output Results ===
print("\n Linear Complexity Analysis Results")
print(f"  Keystream Length Used: {len(bits)} bits")
print(f"  Linear Complexity: {linear_complexity}")
print(f"  Expected (Ideal Random): ~{len(bits) // _sage_const_2 }")

# === Interpretation ===
if linear_complexity < len(bits) // _sage_const_4 :
    print(" Warning: Very low complexity â€” potential vulnerability due to predictability.")
elif linear_complexity >= len(bits) // _sage_const_2 :
    print(" Good: High linear complexity â€” suggests strong resistance to linear attacks.")
else:
    print(" Moderate: Acceptable complexity â€” could still be optimized for better security.")

print("\n Done. Use this result alongside your Walsh & randomness tests for full profile babe ðŸ˜˜")

